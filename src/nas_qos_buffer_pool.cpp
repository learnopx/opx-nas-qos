/*
 * Copyright (c) 2016 Dell Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
 * LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS
 * FOR A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
 *
 * See the Apache Version 2.0 License for specific language governing
 * permissions and limitations under the License.
 */

/*!
 * \file   nas_qos_buffer_pool.cpp
 * \brief  NAS QOS buffer_pool Object
 * \date   03-2016
 * \author
 */

#include "event_log.h"
#include "std_assert.h"
#include "nas_qos_common.h"
#include "nas_qos_buffer_pool.h"
#include "dell-base-qos.h"
#include "nas_ndi_qos.h"
#include "nas_base_obj.h"
#include "nas_qos_switch.h"

nas_qos_buffer_pool::nas_qos_buffer_pool (nas_qos_switch* switch_p)
           : base_obj_t (switch_p)
{
    memset(&cfg, 0, sizeof(cfg));
    buffer_pool_id = 0;
}

const nas_qos_switch& nas_qos_buffer_pool::get_switch()
{
    return static_cast<const nas_qos_switch&> (base_obj_t::get_switch());
}


void nas_qos_buffer_pool::commit_create (bool rolling_back)

{
    base_obj_t::commit_create(rolling_back);
}

void* nas_qos_buffer_pool::alloc_fill_ndi_obj (nas::mem_alloc_helper_t& m)
{
    // NAS Qos buffer_pool does not allocate memory to save the incoming tentative attributes
    return this;
}

bool nas_qos_buffer_pool::push_create_obj_to_npu (npu_id_t npu_id,
                                     void* ndi_obj)
{
    ndi_obj_id_t ndi_buffer_pool_id;
    t_std_error rc;

    EV_LOGGING(QOS, DEBUG, "NAS-QOS", "Creating obj on NPU %d", npu_id);

    nas_qos_buffer_pool * nas_qos_buffer_pool_p = static_cast<nas_qos_buffer_pool*> (ndi_obj);

    // form attr_list
    std::vector<uint64_t> attr_list;
    attr_list.resize(_set_attributes.len());

    uint_t num_attr = 0;
    for (auto attr_id: _set_attributes) {
        attr_list[num_attr++] = attr_id;
    }

    if ((rc = ndi_qos_create_buffer_pool (npu_id,
                                   &attr_list[0],
                                   num_attr,
                                   &nas_qos_buffer_pool_p->cfg,
                                   &ndi_buffer_pool_id))
            != STD_ERR_OK)
    {
        throw nas::base_exception {rc, __PRETTY_FUNCTION__,
            "NDI QoS buffer_pool Create Failed"};
    }
    // Cache the new buffer_pool ID generated by NDI
    set_ndi_obj_id(npu_id, ndi_buffer_pool_id);

    return true;

}


bool nas_qos_buffer_pool::push_delete_obj_to_npu (npu_id_t npu_id)
{
    t_std_error rc;

    EV_LOGGING(QOS, DEBUG, "NAS-QOS", "Deleting obj on NPU %d", npu_id);

    if ((rc = ndi_qos_delete_buffer_pool(npu_id, ndi_obj_id(npu_id)))
        != STD_ERR_OK)
    {
        throw nas::base_exception {rc, __PRETTY_FUNCTION__,
            "NDI buffer_pool Delete Failed"};
    }

    return true;
}

bool nas_qos_buffer_pool::is_leaf_attr (nas_attr_id_t attr_id)
{
    // Table of function pointers to handle modify of Qos buffer_pool
    // attributes.
    static const std::unordered_map <BASE_QOS_BUFFER_POOL_t,
                                     bool,
                                     std::hash<int>>
        _leaf_attr_map =
    {
        // modifiable objects
        {BASE_QOS_BUFFER_POOL_SHARED_SIZE,    false},
        {BASE_QOS_BUFFER_POOL_POOL_TYPE, true},
        {BASE_QOS_BUFFER_POOL_SIZE, true},
        {BASE_QOS_BUFFER_POOL_THRESHOLD_MODE, true},

        //The NPU ID list attribute is handled by the base object itself.
    };

    return (_leaf_attr_map.at(static_cast<BASE_QOS_BUFFER_POOL_t>(attr_id)));
}

bool nas_qos_buffer_pool::push_leaf_attr_to_npu (nas_attr_id_t attr_id,
                                           npu_id_t npu_id)
{
    t_std_error rc = STD_ERR_OK;

    EV_LOGGING(QOS, DEBUG, "QOS", "Modifying npu: %d, attr_id %d",
                    npu_id, attr_id);

    qos_buffer_pool_struct_t cfg= {0};

    switch (attr_id) {
    case BASE_QOS_BUFFER_POOL_POOL_TYPE:
        cfg.type = get_type();
        break;

    case BASE_QOS_BUFFER_POOL_THRESHOLD_MODE:
        cfg.threshold_mode = get_threshold_mode();
        break;

    case BASE_QOS_BUFFER_POOL_SIZE:
        cfg.size = get_size();
        break;


    default:
        STD_ASSERT (0); //non-modifiable object
    }

    rc = ndi_qos_set_buffer_pool_attr(npu_id,
                                   ndi_obj_id(npu_id),
                                   (BASE_QOS_BUFFER_POOL_t)attr_id,
                                   &cfg);
    if (rc != STD_ERR_OK) {
            throw nas::base_exception {rc, __PRETTY_FUNCTION__,
                "NDI attribute Set Failed"};
    }

    return true;
}

uint32_t nas_qos_buffer_pool::get_shared_size()
{
    npu_id_t npu_id;
    nas_attr_id_t nas_attr_list[1];

    if (get_first_npu_id(npu_id) == false) {
        EV_LOGGING(QOS, ERR, "NAS-QOS",
                "npu_id not available, failed to get current buffer size");
        return 0;
    }

    nas_attr_list[0] = BASE_QOS_BUFFER_POOL_SHARED_SIZE;
    if (ndi_qos_get_buffer_pool(npu_id,
                                ndi_obj_id(npu_id),
                                nas_attr_list,
                                1,
                                &cfg) == STD_ERR_OK) {
        return cfg.shared_size;
    }
    else {
        return 0;
    }

}
